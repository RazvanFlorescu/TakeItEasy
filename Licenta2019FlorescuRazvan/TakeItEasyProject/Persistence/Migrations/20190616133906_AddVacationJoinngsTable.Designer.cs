// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(TakeItEasyContext))]
    [Migration("20190616133906_AddVacationJoinngsTable")]
    partial class AddVacationJoinngsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Content");

                    b.Property<DateTime?>("DeletedDate")
                        .HasMaxLength(7);

                    b.Property<Guid>("EntityId");

                    b.Property<DateTime>("LastChangedDate")
                        .HasMaxLength(7);

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<Guid>("EntityId");

                    b.Property<DateTime>("LastChangedDate");

                    b.Property<string>("Latitude")
                        .IsRequired();

                    b.Property<int>("LocationType");

                    b.Property<string>("Longitude")
                        .IsRequired();

                    b.Property<Guid>("VacationId");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<DateTime?>("DeletedDate")
                        .HasMaxLength(7);

                    b.Property<Guid>("EntityId");

                    b.Property<bool>("IsViewed");

                    b.Property<DateTime>("LastChangedDate")
                        .HasMaxLength(7);

                    b.Property<Guid>("ReceiverId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DeletedDate")
                        .HasMaxLength(7);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("EntityId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<Guid?>("ImageId");

                    b.Property<DateTime>("LastChangedDate")
                        .HasMaxLength(7);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasFilter("[ImageId] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.Vacation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<int>("AvailableMode");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("EndDate")
                        .HasMaxLength(20);

                    b.Property<Guid>("EntityId");

                    b.Property<Guid?>("ImageId");

                    b.Property<DateTime>("LastChangedDate");

                    b.Property<DateTime>("StartDate")
                        .HasMaxLength(20);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasFilter("[ImageId] IS NOT NULL");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("Entities.VacationJoining", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DeletedDate")
                        .HasMaxLength(7);

                    b.Property<Guid>("EntityId");

                    b.Property<DateTime>("LastChangedDate")
                        .HasMaxLength(7);

                    b.Property<int>("StatusJoining");

                    b.Property<Guid>("UserId");

                    b.Property<Guid>("VacationId");

                    b.HasKey("Id");

                    b.ToTable("VacationJoinings");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasOne("Entities.Image")
                        .WithOne()
                        .HasForeignKey("Entities.User", "ImageId");
                });

            modelBuilder.Entity("Entities.Vacation", b =>
                {
                    b.HasOne("Entities.Image")
                        .WithOne()
                        .HasForeignKey("Entities.Vacation", "ImageId");
                });
#pragma warning restore 612, 618
        }
    }
}
